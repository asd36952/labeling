1.0564101
/home/asd36952/labeling/code/rnn.py:142: UserWarning: RNN module weights are not part of single contiguous chunk of memory. This means they need to be compacted at every call, possibly greatly increasing memory usage. To compact weights again call flatten_parameters().
  encoder_output_forward, (encoder_hidden_forward, encoder_cell_forward) = self.encoder_forward(sentence_embedding, (encoder_hidden_forward, encoder_cell_forward))
/home/asd36952/labeling/code/rnn.py:143: UserWarning: RNN module weights are not part of single contiguous chunk of memory. This means they need to be compacted at every call, possibly greatly increasing memory usage. To compact weights again call flatten_parameters().
  encoder_output_backward, (encoder_hidden_backward, encoder_cell_backward) = self.encoder_backward(reversed_sentence_embedding, (encoder_hidden_backward, encoder_cell_backward))
/home/asd36952/labeling/code/rnn.py:161: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  att = nn.Softmax()(torch.matmul(encoder_output_list[batch_idx], encoder_cell[batch_idx]))
/home/asd36952/labeling/code/rnn.py:167: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  output = nn.Softmax()(self.fc3(output))
1.0447892
1.0323842
1.0210083
1.0087997
(0.0, 0.0, 0.0)
0.9977355
0.9872987
0.9765745
0.963783
0.95098907
(0.0, 0.0, 0.0)
0.9389502
0.92640334
0.675814
0.6651651
0.6547931
(0.0, 0.0, 0.0)
0.64408535
0.63267946
0.6203261
0.60665905
0.59305066
(0.0, 0.0, 0.0)
0.5788813
0.5652433
0.5518897
0.4902268
0.48268843
(0.0, 0.0, 0.0)
0.47465593
0.46604162
0.45693576
0.44666088
0.43594784
(0.0, 0.0, 0.0)
0.42483538
0.41316387
0.40146607
0.38975132
0.37762752
(0.0, 0.0, 0.0)
0.36530435
0.3531617
0.34073752
0.32817864
0.3154137
(0.0, 0.0, 0.0)
0.64689475
0.6347126
0.6222895
0.6096342
0.59678674
(0.0, 0.0, 0.0)
0.5843636
0.5725473
0.56085765
0.549215
0.537689
(0.1, 0.012539184952978056, 0.022284122562674095)
0.8926479
0.8783555
0.8657462
0.8542237
0.84382063
(0.09523809523809523, 0.012539184952978056, 0.0221606648199446)
1.0579216
1.0476264
1.0374793
1.0272961
1.0172017
(0.10909090909090909, 0.018808777429467086, 0.03208556149732621)
1.0071589
0.9972887
0.9871626
0.9773471
1.1487119
(0.13793103448275862, 0.025078369905956112, 0.042440318302387266)
1.1375717
1.1488507
1.1385657
1.1282872
1.1179916
(0.14444444444444443, 0.04075235109717868, 0.06356968215158924)
1.0505978
1.0397449
1.0293562
1.0189165
1.008231
(0.15853658536585366, 0.04075235109717868, 0.06483790523690773)
0.9974103
0.98652047
0.9754882
0.9642433
0.8719094
(0.15306122448979592, 0.047021943573667714, 0.07194244604316546)
0.8615752
0.8514795
0.8415938
0.83177185
0.82193893
(0.14166666666666666, 0.05329153605015674, 0.0774487471526196)
0.8121475
0.7795229
0.7672434
0.7557044
0.7444725
(0.15527950310559005, 0.07836990595611286, 0.10416666666666667)
0.73338395
0.72259873
0.71193093
0.70163804
0.6462577
(0.15053763440860216, 0.0877742946708464, 0.11089108910891089)
0.59763175
0.58904034
0.58063126
0.57243526
0.56415975
(0.15656565656565657, 0.09717868338557993, 0.11992263056092842)
0.5561584
0.5487359
0.5404924
0.5325673
0.6462485
(0.16, 0.10031347962382445, 0.1233140655105973)
0.63153714
0.6213162
0.61212236
0.6031456
0.5958541
(0.15714285714285714, 0.10344827586206896, 0.12476370510396977)
0.58900386
0.5818423
0.5751524
0.5680276
0.56078213
(0.15865384615384615, 0.10344827586206896, 0.1252371916508539)
0.5540063
0.5464661
0.53915215
0.53174603
0.52429867
(0.1542056074766355, 0.10344827586206896, 0.12382739212007503)
0.8604083
0.8171605
0.7806994
0.74785894
0.7128589
(0.15300546448087432, 0.0877742946708464, 0.11155378486055777)
0.6707686
0.6474159
0.6318312
0.6181075
0.6058238
(0.14210526315789473, 0.08463949843260188, 0.10609037328094302)
0.59434843
0.58420306
0.5743935
0.56499875
0.55588436
(0.14622641509433962, 0.09717868338557993, 0.1167608286252354)
0.5469347
0.53804076
0.52914476
0.52047634
0.5122656
(0.14601769911504425, 0.10344827586206896, 0.12110091743119267)
0.50379664
0.49557763
0.4872704
0.47889918
0.4706589
(0.14166666666666666, 0.10658307210031348, 0.12164579606440072)
0.46211523
0.4536873
0.44546232
0.43729717
0.42864951
(0.14112903225806453, 0.109717868338558, 0.1234567901234568)
0.4204214
0.41207817
0.40452528
0.39733198
0.3905716
(0.14338235294117646, 0.12225705329153605, 0.13197969543147206)
0.38228568
0.37472034
0.36955565
0.36132446
0.35275528
(0.13768115942028986, 0.11912225705329153, 0.12773109243697478)
0.34534913
0.33701795
0.33061475
0.32154712
0.31284457
(0.13978494623655913, 0.12225705329153605, 0.13043478260869568)
0.3043381
0.29753143
0.28875673
0.28097856
0.2803534
(0.1371841155234657, 0.11912225705329153, 0.12751677852348994)
0.26812032
0.2603868
0.25369585
0.24696216
0.24074349
(0.14130434782608695, 0.12225705329153605, 0.1310924369747899)
0.23380505
0.2271608
0.22163427
0.21491335
0.20865835
(0.1510791366906475, 0.13166144200626959, 0.14070351758793972)
0.20235135
0.1959601
0.18984774
0.1837028
0.1780629
(0.14634146341463414, 0.13166144200626959, 0.1386138613861386)
0.17275423
0.16780777
0.16224606
0.15690333
0.15152462
(0.15384615384615385, 0.13793103448275862, 0.14545454545454548)
0.14687464
0.14167781
0.13675144
0.1324593
0.12776667
(0.15017064846416384, 0.13793103448275862, 0.14379084967320263)
0.12355413
0.11891022
0.11439988
0.10972367
0.10509414
(0.1541095890410959, 0.14106583072100312, 0.14729950900163663)
0.101446725
0.09694556
0.09297764
0.08861103
0.08527473
(0.14814814814814814, 0.13793103448275862, 0.14285714285714285)
0.08098461
0.07712139
0.074054025
0.06967274
0.065864645
(0.1505016722408027, 0.14106583072100312, 0.14563106796116507)
0.062081628
0.08815153
0.14854497
0.09018178
0.07190968
(0.1490066225165563, 0.14106583072100312, 0.14492753623188406)
0.055724967
0.06410239
0.047308326
0.055602074
0.041249618
(0.14473684210526316, 0.13793103448275862, 0.14125200642054575)
0.044956703
0.03534269
0.032397367
0.02981096
0.027456606
(0.1461038961038961, 0.14106583072100312, 0.1435406698564593)
0.025501806
0.023332074
0.021418206
0.024936927
0.01819917
(0.14516129032258066, 0.14106583072100312, 0.14308426073131955)
0.016492946
0.015201035
0.013687668
0.012612252
0.011330099
(0.1488673139158576, 0.14420062695924765, 0.14649681528662423)
0.010454187
0.012734522
0.020829823
0.010541845
0.009911099
(0.16025641025641027, 0.15673981191222572, 0.1584786053882726)
0.0072158305
0.008174542
0.006037308
0.014501588
0.0051179635
(0.14376996805111822, 0.14106583072100312, 0.14240506329113925)
0.0047288365
0.0042630644
0.0038223816
0.0035369631
0.0031249337
(0.15654952076677317, 0.1536050156739812, 0.15506329113924053)
0.0029049993
0.0025566546
0.002378122
0.002086571
0.0019416631
(0.14376996805111822, 0.14106583072100312, 0.14240506329113925)
0.0017003099
0.0015794458
0.0013836493
0.0012879601
0.0011265485
(0.15605095541401273, 0.1536050156739812, 0.15481832543443919)
0.0010456501
0.00091870024
0.0008526484
0.22079808
0.0007283403
(0.1492063492063492, 0.14733542319749215, 0.1482649842271293)
0.018259306
0.00062537676
0.0006347343
0.0005227779
0.00047850894
(0.15605095541401273, 0.1536050156739812, 0.15481832543443919)
0.00043207352
0.00038273333
0.00035322673
0.00031129434
0.00028776465
(0.1523809523809524, 0.15047021943573669, 0.15141955835962145)
0.00025359966
0.00023446619
0.00020626167
0.00019000158
0.00016719752
(0.16455696202531644, 0.16300940438871472, 0.16377952755905512)
0.00015652482
0.00013838834
0.00012783319
0.00011180635
0.000102981794
(0.15772870662460567, 0.15673981191222572, 0.15723270440251572)
9.1791924e-05
8.4574e-05
7.503532e-05
6.915547e-05
6.1636565e-05
(0.16455696202531644, 0.16300940438871472, 0.16377952755905512)
5.6781602e-05
5.0648927e-05
4.660638e-05
4.1718242e-05
3.839487e-05
(0.16352201257861634, 0.16300940438871472, 0.16326530612244897)
3.4400982e-05
3.1640266e-05
2.845117e-05
2.6148751e-05
2.3552055e-05
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
2.1625952e-05
1.9535952e-05
1.7922812e-05
1.6231454e-05
1.490519e-05
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
2.1976586e-05
1.5195757e-05
1.1854066e-05
1.0792326e-05
9.831174e-06
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
8.992961e-06
8.225534e-06
7.54379e-06
6.9104785e-06
6.3479497e-06
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
5.8264004e-06
5.353281e-06
4.936043e-06
4.5486076e-06
4.1947005e-06
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
3.8705966e-06
3.5762957e-06
3.3117976e-06
3.0584756e-06
2.849858e-06
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
2.6486907e-06
2.4400733e-06
2.2798845e-06
2.119696e-06
1.963233e-06
(0.17034700315457413, 0.16927899686520376, 0.16981132075471697)
1.840298e-06
1.721088e-06
1.6093288e-06
1.5050204e-06
1.4118878e-06
(0.17034700315457413, 0.16927899686520376, 0.16981132075471697)
1.3262056e-06
1.2516996e-06
1.1660177e-06
1.1064128e-06
1.0319068e-06
(0.17034700315457413, 0.16927899686520376, 0.16981132075471697)
9.909285e-07
9.387743e-07
8.642684e-07
8.3074065e-07
7.934877e-07
(0.17034700315457413, 0.16927899686520376, 0.16981132075471697)
7.450588e-07
7.22707e-07
6.705529e-07
6.407505e-07
6.1094806e-07
(0.17034700315457413, 0.16927899686520376, 0.16981132075471697)
5.997722e-07
5.6251923e-07
5.3271685e-07
5.140904e-07
4.805628e-07
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
4.58211e-07
4.544857e-07
4.3958448e-07
4.0978216e-07
3.9488097e-07
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
3.799798e-07
3.7625452e-07
3.5390275e-07
3.4645217e-07
3.390016e-07
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
3.166498e-07
3.1664982e-07
3.0547392e-07
2.9057276e-07
2.8684747e-07
(0.16981132075471697, 0.16927899686520376, 0.1695447409733124)
2.793969e-07
2.7194628e-07
2.495945e-07
2.3469336e-07
2.3469335e-07
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
2.3469336e-07
2.2351747e-07
2.160669e-07
2.0861631e-07
2.0861631e-07
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
2.0861631e-07
2.0861631e-07
2.0116573e-07
1.8626457e-07
1.8626456e-07
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
1.7881398e-07
1.7881396e-07
1.7881396e-07
1.7881398e-07
1.7881396e-07
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
1.639128e-07
1.6018751e-07
1.6018751e-07
1.5273693e-07
1.5273693e-07
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
1.5273693e-07
1.4528635e-07
1.4528635e-07
1.4528635e-07
1.4528635e-07
(0.16666666666666666, 0.16614420062695925, 0.1664050235478807)
1.3038519e-07
1.3038519e-07
1.3038519e-07
1.3038519e-07
1.3038519e-07
(0.16614420062695925, 0.16614420062695925, 0.16614420062695925)
1.3038519e-07
1.3038519e-07
1.2293461e-07
1.229346e-07
1.1548401e-07
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
1.1548402e-07
1.1548402e-07
1.1548401e-07
1.1548401e-07
1.0803343e-07
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
1.0058285e-07
1.0058285e-07
1.0058285e-07
9.313227e-08
9.313227e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
9.313227e-08
8.568169e-08
8.568169e-08
8.568169e-08
8.568169e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
8.568169e-08
8.568169e-08
7.823111e-08
7.823111e-08
7.823111e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
7.823111e-08
7.078053e-08
7.078053e-08
7.078052e-08
7.078053e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
7.078053e-08
6.332994e-08
6.332994e-08
6.332995e-08
6.332994e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332994e-08
6.332994e-08
6.332995e-08
6.332995e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332995e-08
6.332994e-08
6.332995e-08
6.332995e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332994e-08
6.332994e-08
6.332994e-08
6.332994e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332995e-08
6.332995e-08
6.332994e-08
6.332995e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332994e-08
6.332994e-08
6.332994e-08
6.332994e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332994e-08
6.332995e-08
6.332994e-08
6.332995e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332995e-08
6.332994e-08
6.332994e-08
6.332994e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332995e-08
6.332994e-08
6.332994e-08
6.332994e-08
6.332994e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332994e-08
6.332994e-08
6.332995e-08
6.332994e-08
6.332994e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
6.332995e-08
6.332995e-08
6.332994e-08
4.842878e-08
4.842878e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
4.09782e-08
4.0978197e-08
4.09782e-08
3.3527616e-08
3.3527616e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
3.3527616e-08
3.3527616e-08
3.3527616e-08
3.3527616e-08
3.3527616e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
3.3527616e-08
3.3527616e-08
3.3527616e-08
3.3527616e-08
3.3527616e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
3.3527616e-08
3.3527616e-08
3.3527616e-08
3.3527616e-08
3.3527616e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
3.3527616e-08
3.3527616e-08
3.3527616e-08
2.6077036e-08
3.3527616e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
2.6077036e-08
1.8626453e-08
3.3527616e-08
1.8626453e-08
2.6077036e-08
(0.16927899686520376, 0.16927899686520376, 0.16927899686520376)
3.3527616e-08
1.8626453e-08
2.6077036e-08
2.6077036e-08
2.6077036e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
1.8626453e-08
3.3527616e-08
1.8626453e-08
2.6077036e-08
2.6077036e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
2.6077036e-08
1.8626453e-08
3.3527616e-08
1.8626453e-08
2.6077036e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
2.6077036e-08
2.6077036e-08
1.8626453e-08
3.3527616e-08
1.8626453e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
2.6077036e-08
2.6077036e-08
2.6077036e-08
1.8626453e-08
3.3527616e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
1.8626453e-08
2.6077036e-08
2.6077036e-08
2.6077036e-08
1.8626453e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
2.6077036e-08
2.6077036e-08
2.6077036e-08
1.8626453e-08
3.3527616e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
1.8626453e-08
2.6077036e-08
2.6077036e-08
2.6077036e-08
1.8626453e-08
(0.1724137931034483, 0.1724137931034483, 0.1724137931034483)
2.6077036e-08
2.6077036e-08
1.8626453e-08
Process ForkPoolWorker-35987:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Process ForkPoolWorker-35985:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 343, in get
    res = self._reader.recv_bytes()
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 407, in _recv_bytes
    buf = self._recv(4)
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
Process ForkPoolWorker-35989:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Process ForkPoolWorker-35992:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Process ForkPoolWorker-35990:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Process ForkPoolWorker-35986:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Process ForkPoolWorker-35988:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Process ForkPoolWorker-35991:
Traceback (most recent call last):
  File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 342, in get
    with self._rlock:
  File "/usr/lib/python3.5/multiprocessing/synchronize.py", line 96, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "rnn_train.py", line 127, in <module>
    classifier.train(sentence, entity_position, filler_position, relation, label, args.batch_size, learning_rate = args.learning_rate, username = args.username)
  File "/home/asd36952/labeling/code/rnn.py", line 181, in train
    sentence_len = list(map(len, self.util.batch_sentence_to_index(batch_sentence)))
  File "/home/asd36952/labeling/code/util.py", line 46, in batch_sentence_to_index
    sentence_index = list(p.map(self.sentence_to_index, sentence))
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 575, in __exit__
    self.terminate()
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 505, in terminate
    self._terminate()
  File "/usr/lib/python3.5/multiprocessing/util.py", line 186, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 535, in _terminate_pool
    cls._help_stuff_finish(inqueue, task_handler, len(pool))
  File "/usr/lib/python3.5/multiprocessing/pool.py", line 520, in _help_stuff_finish
    inqueue._rlock.acquire()
KeyboardInterrupt
